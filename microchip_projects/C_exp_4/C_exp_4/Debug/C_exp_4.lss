
C_exp_4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000000d0  00000144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000014c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000017c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005a5  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000052b  00000000  00000000  0000077d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001d0  00000000  00000000  00000ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000e78  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002ec  00000000  00000000  00000eac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000066  00000000  00000000  00001198  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000011fe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ed       	ldi	r30, 0xD0	; 208
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 66 00 	jmp	0xcc	; 0xcc <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
//Write an AVR C program to send value -3 to +3 to port B
#include <avr/io.h>
int main(void)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	27 97       	sbiw	r28, 0x07	; 7
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
	DDRB=0xFF;
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	87 bb       	out	0x17, r24	; 23
	signed char num[7] = {-3,-2,-1,0,1,2,3};
  9a:	87 e0       	ldi	r24, 0x07	; 7
  9c:	e0 e6       	ldi	r30, 0x60	; 96
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	de 01       	movw	r26, r28
  a2:	11 96       	adiw	r26, 0x01	; 1
  a4:	01 90       	ld	r0, Z+
  a6:	0d 92       	st	X+, r0
  a8:	8a 95       	dec	r24
  aa:	e1 f7       	brne	.-8      	; 0xa4 <main+0x22>
		signed char z;
	for (z=0;z<7;z++)
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	0b c0       	rjmp	.+22     	; 0xc6 <main+0x44>
	PORTB = num[z];
  b0:	e1 e0       	ldi	r30, 0x01	; 1
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	ec 0f       	add	r30, r28
  b6:	fd 1f       	adc	r31, r29
  b8:	e8 0f       	add	r30, r24
  ba:	f1 1d       	adc	r31, r1
  bc:	87 fd       	sbrc	r24, 7
  be:	fa 95       	dec	r31
  c0:	90 81       	ld	r25, Z
  c2:	98 bb       	out	0x18, r25	; 24
int main(void)
{
	DDRB=0xFF;
	signed char num[7] = {-3,-2,-1,0,1,2,3};
		signed char z;
	for (z=0;z<7;z++)
  c4:	8f 5f       	subi	r24, 0xFF	; 255
  c6:	87 30       	cpi	r24, 0x07	; 7
  c8:	9c f3       	brlt	.-26     	; 0xb0 <main+0x2e>
  ca:	ff cf       	rjmp	.-2      	; 0xca <main+0x48>

000000cc <_exit>:
  cc:	f8 94       	cli

000000ce <__stop_program>:
  ce:	ff cf       	rjmp	.-2      	; 0xce <__stop_program>
